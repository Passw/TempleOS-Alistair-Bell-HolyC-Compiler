=================
Compiler pipeline
=================

* There are 4 functions that the compiler undertakes.
* Parser
* Lexer
* Bytecode generator
* Bytecode converter


Parser
------
* Reads in the target file specified by the command line arguments.
* Takes the stream and splits it into tokens.
* Tokens have basic analysis done to it, numerical constants are validated and system defined keywords identified.

Lexer
----
* Understands the tokens and turns them into expressions.
* Handles syntax, typing and misc errors that occur.
* Populates the symbol tables.

Bytecode generator
------------------
* Turns instructions into psudo assembly language, machine independant.
* Does the optimising of expressions (see optimisations to generated code).
* Will output the binary dump of structures and data, writes into the custom open format. (if this stage is the termination stage).

Bytecode converter
------------------
* Either a carry on from the last stage or read and parse the binary input of bytecode.
* Uses an map and a predefined instruction set to generate processor dependant code in the unix elf format (or PE if PE is supported).
* Links and generates a binary.
